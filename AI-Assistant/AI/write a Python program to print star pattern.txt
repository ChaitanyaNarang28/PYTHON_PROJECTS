AI response for prompt:using AI write a Python program to print star pattern 
 ********************* 
 
```python
def print_star_pattern(rows):
  """
  Prints a star pattern based on the given number of rows.

  Args:
    rows: The number of rows in the pattern.
  """

  # Upper half of the pattern
  for i in range(1, rows + 1):
    # Print spaces before stars
    for j in range(1, rows - i + 1):
      print(" ", end="")
    # Print stars
    for k in range(1, 2 * i):
      print("*", end="")
    print()

  # Lower half of the pattern
  for i in range(rows - 1, 0, -1):
    # Print spaces before stars
    for j in range(1, rows - i + 1):
      print(" ", end="")
    # Print stars
    for k in range(1, 2 * i):
      print("*", end="")
    print()

# Get the number of rows from the user
rows = int(input("Enter the number of rows: "))

# Print the star pattern
print_star_pattern(rows)
```

**Explanation:**

1. **Function `print_star_pattern(rows)`:**
   - Takes the number of rows as input.
   - Prints the upper half of the pattern using nested loops:
     - The outer loop iterates through each row.
     - The inner loop prints spaces before the stars in each row.
     - Another inner loop prints the stars for that row.
   - Prints the lower half of the pattern using similar logic, but iterating in reverse order.

2. **User Input:**
   - Prompts the user to enter the number of rows.

3. **Function Call:**
   - Calls the `print_star_pattern()` function with the user-provided number of rows.

**Output:**

If you run this program and enter `5` for the number of rows, the output will be:

```
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
```

This program uses the basic building blocks of loops and conditional statements in Python to create a visually appealing star pattern. You can experiment with different variations of this program to create various other star patterns.
